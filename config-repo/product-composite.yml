api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL
    contact:
      name: Contact
      url: My
      email: me@mail.com

  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Base product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a<b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

server:
  port: 7005
  error:
    include-message: always

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json

app.product-service.timeoutSec: 2

#resilience4j.retry:
#  backends:
#    product:
#      # 첫 번째 호출을 포함한 총 재시도 횟수
#      maxRetryAttempts: 3
#      # 재시도를 다시 수행하기 전의 대기 시간
#      waitDuration: 1000
#      # 재시도를 트리거하는 예외 항목
#      retryExceptions:
#        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j:
  retry:
    instances:
      product:
        # 첫 번째 호출을 포함한 총 재시도 횟수
        maxRetryAttempts: 3
        # 재시도를 다시 수행하기 전의 대기 시간
        waitDuration: 1000
        # 재시도를 트리거하는 예외 항목
        retryExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

  circuitbreaker:
    configs:
      default:
        # 서킷 브레이커 정보를 상태 점검(health) 엔드포인트에 추가할지 결정
        registerHealthIndicator: true
        # 서킷이 CLOSED 일때 요청의 결과를 기록하기 위한 슬라이딩 윈도의 크기
        slidingWindowSize: 5
        # 실패한 호출에 대한 임계값(백분율)으로 이 값을 초과하면 서킷이 열림
        failureRateThreshold: 50
        # 서킷 브레이커가 Open에서 half-open으로 전환하기 전 시간
        waitDurationInOpenState: 10s
        # 반열림 상태에서의 호출 수로, 서킷을 다시 열거나 닫힘 상태로 돌아갈지를 결정할 때 사용
        permittedNumberOfCallsInHalfOpenState: 3
        # event가 발생되면, 해당 버퍼에 저장되는데 그 크기를 지정.
        eventConsumerBufferSize: 10

    instances:
      product:
        baseConfig: default
        # 대기 시간이 지난 후에 서킷을 반열림 상태로 자동 전환할지, 첫 번째 호출이 들어오길 기다렸다가 반열림 상태로 전환할지 결정
        automaticTransitionFromOpenToHalfOpenEnabled: true
        # 오류로 간주하지 않을 예외를 지정.
        ignoreExceptions:
          - se.magnus.util.exceptions.InvalidInputException
          - se.magnus.util.exceptions.NotFoundException

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-products:
      destination: products
      producer:
        required-groups: auditGroup
    output-recommendations:
      destination: recommendations
      producer:
        required-groups: auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups: auditGroup

ribbon.ServerListRefreshInterval: 5000
ribbon.NFLoadBalancerPingInterval: 5

---
spring:
  config:
    activate:
      on-profile: docker
server:
  port: 8080

---
spring:
  config:
    activate:
      on-profile: streaming_partitioned

spring.cloud.stream:
  bindings:
    output-products:
      producer:
        partition-key-expression: payload.key
        partition-count: 2
    output-recommendations:
      producer:
        partition-key-expression: payload.key
        partition-count: 2
    output-reviews:
      producer:
        partition-key-expression: payload.key
        partition-count: 2

---
spring:
  config:
    activate:
      on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka